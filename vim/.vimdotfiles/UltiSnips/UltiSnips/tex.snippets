snippet preamblefig "preamble for figs" bA
\usepackage{import}
\usepackage{xifthen}
\usepackage{pdfpages}
\usepackage{transparent}

\newcommand{\incfig}[1]{%
    \def\svgwidth{\columnwidth}
   \import{./figures/}{#1.pdf_tex}
}
\pdfsuppresswarningpagegroup=1
endsnippet

snippet sign "Signature"
Yours sincerely, 

Miguel Raz Guzmán Macedo
endsnippet

global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
endglobal

snippet template "Basic template for note taking" b
\documentclass[a4paper]{article}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage[english,spanish]{babel}
\usepackage{amsmath, amssymb, amsthm, cancel}
\usepackage{/home/mrg/deps/latex/boiboites}
\usepackage{/home/mrg/deps/latex/jlcode}
\usepackage{marginnote,geometry}

% For pretty algo codes
\usepackage{listings}
\lstset{numbers=left, numberstyle=\tiny, stepnumber=1, numbersep=5pt}
\usepackage[linesnumbered,algoruled,boxed,line]{algorithm2e}


% Set cancel command color to red
\renewcommand{\CancelColor}{\color{red}}

% inkscape-figure manager and shortcuts
\usepackage{import}
\usepackage{pdfpages,transparent,xcolor}

\newcommand{\incfig}[1]{%
    \def\svgwidth{\columnwidth}
    \import{./figures/}{#1.pdf_tex}
}
\pdfsuppresswarningpagegroup=1

\title{Notas de Clase: $1 2020I}
\author{Miguel Raz Guzmán Macedo}
\date{$2}

\newtheorem{theorem}{Theorem}[section]
\newtheorem{lemma}{Lemma}[theorem]
\newtheorem{note}{Note}[theorem]
\newtheorem{corollary}{Corollary}[theorem]
\newtheorem{definition}{Definition}[section]
\newboxedtheorem[boxcolor=red,
                 background=red!15, 
                 titlebackground=red!5,
                 titleboxcolor = black]{theo}{Theorem}{theo}
 \newboxedtheorem[boxcolor=blue, 
                 background=blue!15, 
                 titlebackground=blue!5,
                 titleboxcolor = black]{defn}{Definition}{defn}                
\newboxedtheorem[boxcolor=orange, 
                 background=orange!15, 
                 titlebackground=orange!5,
                 titleboxcolor = black]{lemm}{Lemma}{lemm}
\newboxedtheorem[boxcolor=yellow, 
                 background=yellow!15, 
                 titlebackground=yellow!5,
                 titleboxcolor = black]{coro}{Corollary}{coro}
\newboxedtheorem[boxcolor=green, 
                 background=green!15, 
                 titlebackground=green!5,
                 titleboxcolor = black]{example}{Example}{example}
\newboxedtheorem[boxcolor=purple, 
                 background=purple!15, 
                 titlebackground=purple!5,
                 titleboxcolor = black]{hw}{Homework}{hw}
\begin{document}
\maketitle
\begin{abstract}
RESUMEN
$3
\end{abstract}

\section{$4}

$5

\begin{defn}[Title]
DEF
\end{defn}

\begin{theo}[Title]
THEOREM
\end{theo}

\begin{lemm}[Title]
LEMMA
\end{lemm}

\begin{coro}[Title]
CORO
\end{coro}

\begin{example}[Title]
EXAMPLE
\end{example}

\begin{hw}[Title]
TAREA
\end{hw}



\begin{algorithm}[H]
\SetAlgoLined
\KwResult{Write the result here}
initialization\;
\While{While condition}{instructions\;}
\eIf{condition}{instructions1\;
instructions2\;
}{
instructions3\;
}
}
\caption{How to write algos}
\end{algorithm}

\end{document}
endsnippet

snippet algorithm "Algorithm blueprint" bA

\begin{algorithm}[H]
\SetAlgoLined
\KwResult{${1:Write the input here}}
\KwResult{${2:Write the output here}}
initialization\;

// Step 1
$3
\While{While condition}{instructions\;}
\eIf{condition}{instructions1\;
instructions2\;
}{
instructions3\;
}
}
\caption{How to write algos}
\end{algorithm}
endsnippet



snippet beg "begin{} / end{}" bA
\\begin{$1}[$2]
	$0
\\end{$1}
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
\]

$0
endsnippet

snippet ali "Align" bA
\begin{align}
	${1:${VISUAL}}
.\end{align}
endsnippet


context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

snippet == "equals" iA
&= $1 \\\\
endsnippet

snippet != "equals" iA
\neq 
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

snippet bye "Cancel to a value" iA
\cancelto{${1:0}}{${2:${VISUAL}}}
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

snippet Int "integral" w
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} ${4:dx} $0
endsnippet

snippet 'z "zeta" wA
\zeta
endsnippet

# snippet sum "sum" w
# \sum_{n=${1:0}}^{${3:\infty}} ${4:${VISUAL}} $0
# endsnippet

snippet sum "sum" w
\sum_{n=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (${5:x-a})^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

context "math()"
snippet deriv "d/dt" iA
\frac{d}{dt}\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet part "d/dx" w
\frac{\partial ${1:f}}{\partial ${2:x}} $0
endsnippet

snippet partt "d2/dx/dy" w
\frac{\partial^2 ${1:f}}{\partial ${2:x} \partial ${3:y}} $0
endsnippet

snippet parttt "d2f/dx2" w
\frac{\partial^2 ${1:f}}{\partial ${2:x}^2} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet 

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

context "math()"
snippet zd "to the ... power and subscript ..." iA
^{${1:n}}_{${2:i}}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet <= "leq" iA
\le 
endsnippet

snippet >= "geq" iA
\ge 
endsnippet

context "math()"
snippet EE "geq" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet


context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

snippet R0+ "R0+" iA
\\R_0^+
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

snippet lll "l" iA
\ell
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla 
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

priority 100
snippet * "cdot" iA
\cdot 
endsnippet

priority 200
snippet '\cdot *' "cdot" iA
*
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

context "math()"
snippet 2norm "Norm square" iA
\|$1\|^{2}$0
endsnippet

context "math()"
snippet Christ "Christoffel Symbol" iA
\Gamma^{${1:i}}_{${2:jk}} $0
endsnippet

context "math()"
snippet Ric "Ricci Symbol" iA
R^{${1:i}}_{${2:ijk;l}} $0
endsnippet

context "math()"
snippet Einst "Einstein Tensor" iA
G_{\mu \nu}
endsnippet

priority 100
context "math()"
snippet npsil "multiples of pi" iA
\sin \left( \frac{n \pi ${1:x}}{${2:l}} $3 \right) $0
endsnippet



priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp|parallel)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(alpha|beta|Gamma|gamma|delta|Delta|epsilon|eta|lambda|Lambda|phi|Phi|psi|rho|mu|nu|tau|theta|Theta|sigma|omega|Omega)' "ln" rwA 
\\`!p snip.rv = match.group(1)`
endsnippet

priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

snippet >> ">>" iA
\gg
endsnippet

snippet << "<<" iA
\ll
endsnippet

snippet DD "delta" iA
\Delta 
endsnippet

snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

snippet || "mid" iA
 \mid 
endsnippet

context "math()"
snippet cc "subset" Ai
\subset 
endsnippet

snippet notin "not in " iA
\not\in 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

snippet NN "n" iA
\N
endsnippet

snippet Nn "cap" iA
\cap 
endsnippet

snippet UU "cup" iA
\cup 
endsnippet

snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

snippet OO "emptyset" iA
\O
endsnippet

snippet RR "real" iA
\R
endsnippet

snippet QQ "Q" iA
\Q
endsnippet

snippet ZZ "Z" iA
\Z
endsnippet

snippet <! "normal" iA
\triangleleft 
endsnippet

snippet <> "hokje" iA
\diamond 
endsnippet

snippet Fnote "foot note" iA
\footnote{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet text "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet SI "SI" iA
\SI{$1}{$2}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "dot" "dot" riA
\dot{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])dot" "dot" riA
\dot{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "ddot" "ddot" riA
\ddot{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])ddot" "ddot" riA
\ddot{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "vec" "vec" riA
\vec{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])vec" "vec" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "uline" "underline" riA
\underline{$1} $0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])uline" "uline" riA
\underline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "uset" "underset" riA
\underset{${1:${VISUAL}}}{${2:\Sigma}}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])uset" "underset" riA
\underline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "ubrace" "underbrace" riA
\begingroup\color{${1:red}}\underbrace{\color{black}{${2:${VISUAL}}}}_\text{\color{$1}{$3}}\endgroup $0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])ubrace" "underbrace" riA
\underbrace{`!p snip.rv=match.group(1)`}
endsnippet

snippet "BFont" "Bold font" riA
\textbf{${1:${VISUAL}}} $0
endsnippet

snippet "([a-zA-Z])BFont" "BFont" riA
\textbf{`!p snip.rv=match.group(1)`}
endsnippet

snippet letw "let omega" iA
Let $\Omega \subset \C$ be open.
endsnippet

snippet "\<(.*?)\|" "bra" riA
\bra{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

snippet "\|(.*?)\>" "ket" riA
\ket{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

snippet "(.*)\\bra{(.*?)}([^\|]*?)\>" "braket" riA
`!p snip.rv = match.group(1)`\braket{`!p snip.rv = match.group(2)`}{`!p snip.rv = match.group(3).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

snippet lemma "Lemma" bA
\begin{lemma}
$1
\end{lemma}

$2

\begin{proof}
$3
\end{proof}

$0
endsnippet

snippet theorem "Theorem" bA
\begin{theorem}
$1
\end{theorem}

$2

\begin{proof}
$3
\end{proof}

$0
endsnippet

snippet jl "julia latex code" bA
\begin{lstlisting}[language = Julia]
${1:${VISUAL}}
\end{lstlisting}
endsnippet



# vim:ft=snippets
